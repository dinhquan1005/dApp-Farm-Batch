// testHelpers.js
require("dotenv").config();
const { ethers } = require("ethers");
const fs = require("fs");
const path = require("path");

// Delay helper
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function runTests() {
  try {
    console.log("üü° B·∫Øt ƒë·∫ßu ch·∫°y tests...");

    // üîë L·∫•y PRIVATE_KEY & RPC_URL t·ª´ .env
    const PRIVATE_KEY = process.env.PRIVATE_KEY;   // v√≠ Pione testnet
    const RPC_URL = process.env.PIONE_URL;         // RPC Pione testnet

    if (!PRIVATE_KEY || !RPC_URL) throw new Error("Vui l√≤ng ki·ªÉm tra PRIVATE_KEY v√† PIONE_URL trong .env");

    // Load ABI + contract address
    const farmABI = JSON.parse(fs.readFileSync(path.join(__dirname, "FarmABI.json")));
    const batchABI = JSON.parse(fs.readFileSync(path.join(__dirname, "BatchABI.json")));
    const contracts = JSON.parse(fs.readFileSync(path.join(__dirname, "contracts.json")));

    // K·∫øt n·ªëi provider + wallet
    const provider = new ethers.JsonRpcProvider(RPC_URL);
    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

    const balance = await provider.getBalance(wallet.address);
    console.log("‚úÖ Wallet:", wallet.address);
    console.log("‚úÖ Balance:", ethers.formatEther(balance), "ETH");

    if (balance === 0n) throw new Error("Wallet kh√¥ng c√≥ ETH ƒë·ªÉ th·ª±c hi·ªán transaction");

    // Contract instances
    const farmRead = new ethers.Contract(contracts.farm, farmABI, provider);
    const batchRead = new ethers.Contract(contracts.batch, batchABI, provider);
    const farmWrite = new ethers.Contract(contracts.farm, farmABI, wallet);
    const batchWrite = new ethers.Contract(contracts.batch, batchABI, wallet);

    console.log("‚úÖ ƒê√£ t·∫°o contract instances");

    // L·∫•y farm hi·ªán c√≥
    const farmCount = Number(await farmRead.getFarmCount());
    console.log(`üìä S·ªë farm hi·ªán c√≥: ${farmCount}`);
    for (let id = 1; id <= farmCount; id++) {
      const f = await farmRead.getFarm(id);
      console.log(`Farm ${id}:`, f);
    }

    // L·∫•y batch hi·ªán c√≥
    const batchCount = Number(await batchRead.getBatchCount());
    console.log(`üìä S·ªë batch hi·ªán c√≥: ${batchCount}`);
    for (let id = 1; id <= batchCount; id++) {
      const b = await batchRead.getBatch(id);
      console.log(`Batch ${id}:`, b);
    }

    // T·∫°o farm m·ªõi
    console.log("üü° T·∫°o farm m·ªõi...");
    const txFarm = await farmWrite.registerFarm("12.345,67.890", "Ng√¥", {
      gasLimit: 5_000_000,
      gasPrice: ethers.parseUnits("1", "gwei")
    });
    await txFarm.wait();
    console.log("‚úÖ Farm m·ªõi t·∫°o xong");

    await delay(1000); // ƒë·ª£i nonce c·∫≠p nh·∫≠t

    // T·∫°o batch m·ªõi
    console.log("üü° T·∫°o batch m·ªõi...");
    const txBatch = await batchWrite.createBatch(
      farmCount + 1,
      "2025-03-01",
      "2025-06-01",
      "NPK",
      "Neem Oil",
      "qr_test1",
      { gasLimit: 5_000_000, gasPrice: ethers.parseUnits("1", "gwei") }
    );
    await txBatch.wait();
    console.log("‚úÖ Batch m·ªõi t·∫°o xong");

    console.log("üéâ All tests done!");
  } catch (err) {
    console.error("‚ùå L·ªói:", err.message);
  }
}

runTests();
